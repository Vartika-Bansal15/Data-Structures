ALGORITHM:

STEP 1: Initialize Two Arrays:
-> left_max[]: Stores maximum heights from the left for each bar.
-> right_max[]: Stores maximum heights from the right for each bar.

STEP 2: Fill left_max[]:
-> Set left_max[0] = height[0].
-> For each subsequent bar, left_max[i] = max(left_max[i-1], height[i]).

STEP 3: Fill right_max[]:
->Set right_max[n-1] = height[n-1].
->For each preceding bar, right_max[i] = max(right_max[i+1], height[i]).

STEP 4: Calculate Water Trapped:
-> For each bar, calculate the water trapped as water[i] = min(left_max[i], right_max[i]) - height[i].
-> Sum up all water[i] values to get the total water trapped.


PROGRAM:
public class WaterTrap {
    public static int calculateWater(int[] height) {
        int n = height.length;
        if (n <= 2) return 0;

        int[] left_max = new int[n];
        int[] right_max = new int[n];
        int water = 0;

       
        left_max[0] = height[0];
        for (int i = 1; i < n; i++) {
            left_max[i] = Math.max(left_max[i - 1], height[i]);
        }

        right_max[n - 1] = height[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            right_max[i] = Math.max(right_max[i + 1], height[i]);
        }

        for (int i = 0; i < n; i++) {
            water += Math.min(left_max[i], right_max[i]) - height[i];
        }

        return water;
    }

    public static void main(String[] args) {
        int[] height = {0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1};
        System.out.println("Water trapped: " + calculateWater(height));  
    }
}


OUTPUT:
Water trapped: 6

Time Complexity :  O(n)
Space Complexity : O(n)
